# -*- coding: utf-8 -*-
"""air-quality-analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TC3x66pDgtufe7b5EB4QpZ14qxK1mnAr

# Proyek Analisis Data: Nama dataset
- Nama: Jonathan Lexi Febrian Sitohang
- Email: jonathanlexi02@gmail.com
- Id Dicoding:

## Menentukan Pertanyaan Bisnis

- Kapan dan dimana kualitas udara terburuk ?
- Bagaimana kualitas udara tiap tahunnya?

## Menyaipkan semua library yang dibuthkan
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
 - Menampilkan data di tiap stasiun
 - Menggabungkan semua data di tiap stasiun
"""

from google.colab import drive
drive.mount('/content/drive')

"""**Columns Explanation**

- PM2.5: (integer) Hourly Pm2.5 concentration in the area. It is measured in (ug/m³), considered as continuous
- PM10: (integer) Hourly Pm2.5 concentration in the area. It is measured in (ug/m³), considered as continuous
- SO2: (integer) Hourly Pm2.5 concentration in the area. It is measured in (ug/m³), considered as continuous
- NO2: (integer) Hourly Pm2.5 concentration in the area. It is measured in (ug/m³), considered as continuous
- CO-:(integer) Hourly Pm2.5 concentration in the area. It is measured in (ug/m³), considered as continuous
- O3:(integer) Hourly Pm2.5 concentration in the area. It is measured in (ug/m³), considered as continuous
- PRES:(integer) Air pressure of the area. Measured in Pascal, considered as continuous
- DEWP:(integer) degree point temperature considered as continuous
- RAIN: (integer) Precipitation in the area considered as continuous
- WD: (string) The wind direction in that area, considered as categorical.
"""

#combine multiple csv files from google drive to pandas

import glob

path = '/content/drive/MyDrive/Dataset/PRSA_Data_20130301-20170228'
all_files = glob.glob(path + "/*.csv") # this is new

li = []

for filename in all_files:
    df = pd.read_csv(filename, index_col=None, header=0)
    li.append(df)

df = pd.concat(li, axis=0, ignore_index=True)

# check top rows
df.head()

#check bottom rows
df.tail()

"""### Assessing Data

- assesing data di tiap stasiun
- check rows and columns
- find missing value
- invalid value (check type data)
- find duplicate data
- inconsistent value
- outlier
"""

df.info()

df.isnull().sum()

df.duplicated().sum()

df.describe().T

"""#### Aotizhongxin Station



"""

df_aoti = df[df['station'] == 'Aotizhongxin']
df_aoti.head()

df_aoti.info()

"""data Aotizhongxin Station memiliki 35064 baris dan tipe data variabel sudah sesui maka tidak ada yang akan dihandle"""

df_aoti.isnull().sum()

"""Terdapat missing value pada variabel PM2.5,PM10,SO2,NO2,CO,O3,TEMP,PRES,DEWP,RAIN,wd,WSPM di data Aotizhongxin Station.Missing value tersebut akan dihandle di tahapan cleaning data"""

df_aoti.duplicated().sum()

"""Tidak ada data yang duplikat"""

df_aoti.describe()

"""Tidak ada keanehan pada persebaran data tersebut karena nilai parameter tiap variabel tersebut normal saja.Maka,tidak ada hal yang akan diubah pada nilai nilai tersebut."""

#make a function boxplot checker for all station data
def boxplot_checker(data) :
  fig,ax = plt.subplots(1,10,figsize=(16,6))


  data.boxplot('PM2.5', ax=ax[0])
  data.boxplot('PM10', ax=ax[1])
  data.boxplot('SO2', ax=ax[2])
  data.boxplot('NO2', ax=ax[3])
  data.boxplot('CO', ax=ax[4])
  data.boxplot('O3', ax=ax[5])
  data.boxplot('TEMP', ax=ax[6])
  data.boxplot('DEWP', ax=ax[7])
  data.boxplot('RAIN', ax=ax[8])
  data.boxplot('WSPM', ax=ax[9])


  plt.subplots_adjust(wspace=0.8)

  plt.show()

boxplot_checker(df_aoti)

"""Terdapat oulier pada kolom PM2.5,PM10,SO2,NO2,CO,O3,RAIN,WSPM

#### Changping Station
"""

#get changping station data
df_chang = df[df['station'] == 'Changping']
df_chang.head()

df_chang.info()

df_chang.isnull().sum()

df_chang.duplicated().sum()

df_chang.describe()

# call all columns we need to identify outlier
boxplot_checker(df_chang)

"""Terdapat oulier pada kolom PM2.5,PM10,SO2,NO2,CO,O3,RAIN,WSPM

####Dingling Station
"""

##get dingling station data
df_ding = df[df['station'] == 'Dingling']
df_ding.head()

## get info
df_ding.info()

df_ding.isnull().sum()

#check duplicated data
df_ding.duplicated().sum()

df_ding.describe()

boxplot_checker(df_ding)

"""Terdapat oulier pada kolom PM2.5,PM10,SO2,NO2,CO,O3,RAIN,WSPM

####Shunyi Station
"""

df_shun = df[df['station'] == 'Shunyi']
df_shun.head()

df_shun.info()

df_shun.isnull().sum()

df_shun.duplicated().sum()

df_shun.describe()

boxplot_checker(df_shun)

"""Terdapat oulier pada kolom PM2.5,PM10,SO2,NO2,CO,O3,RAIN,WSPM

####Tiantan Station
"""

df_tian = df[df['station'] == 'Tiantan']
df_tian.head()

df_tian.info()

df_tian.isnull().sum()

df_tian.duplicated().sum()

df_tian.describe()

boxplot_checker(df_tian)

"""Terdapat oulier pada kolom PM2.5,PM10,SO2,NO2,CO,O3,RAIN,WSPM

####Nongzhanguan Station
"""

df_nong = df[df['station'] == 'Nongzhanguan']
df_nong.head()

df_nong.info()

df_nong.isnull().sum()

df_nong.duplicated().sum()

df_nong.describe()

boxplot_checker(df_nong)

"""Terdapat oulier pada kolom PM2.5,PM10,SO2,NO2,CO,O3,RAIN,WSPM

#### Dongsi Station
"""

df_dong = df[df['station'] == 'Dongsi']
df_dong.head()

df_dong.info()

df_dong.isnull().sum()

df_dong.duplicated().sum()

df_dong.describe()

boxplot_checker(df_dong)

"""Terdapat oulier pada kolom PM2.5,PM10,SO2,NO2,CO,O3,RAIN,WSPM

####Wanshouxigong Station
"""

df_wanshou = df[df['station'] == 'Wanshouxigong']
df_wanshou.head()

df_wanshou.info()

df_wanshou.isnull().sum()

df_wanshou.duplicated().sum()

df_wanshou.describe()

boxplot_checker(df_wanshou)

"""Terdapat oulier pada kolom PM2.5,PM10,SO2,NO2,CO,O3,RAIN,WSPM

####Gucheng Station
"""

df_guch = df[df['station'] == 'Gucheng']
df_guch.head()

df_guch.info()

df_guch.isnull().sum()

df_guch[df_guch[['PM2.5','PM10','SO2','NO2','CO','O3']].isna().all(1)]

"""Terdapat 288 data yang indikator-indikator kualitas udara yang  kosong"""

df_guch.describe()

boxplot_checker(df_guch)

"""Terdapat oulier pada kolom PM2.5,PM10,SO2,NO2,CO,O3,RAIN,WSPM

####Huairou Station
"""

df_hua = df[df['station'] == 'Huairou']
df_hua.head()

df_hua.info()

df_hua.isnull().sum()

df_hua.duplicated().sum()

df_hua.describe()

boxplot_checker(df_hua)

"""Terdapat oulier pada kolom PM2.5,PM10,SO2,NO2,CO,O3,RAIN,WSPM

####Guanyuan Station
"""

df_guan = df[df['station']  == 'Guanyuan']
df_guan.head()

df_guan.info()

df_guan.isnull().sum()

df_guan.duplicated().sum()

df_guan.describe()

boxplot_checker(df_guan)

"""####Wanliu Station"""

df_wanli = df[df['station'] == 'Wanliu']
df_wanli.head()

df_wanli.info()

df_wanli.isnull().sum()

df_wanli.describe()

boxplot_checker(df_wanli)

"""### Cleaning Data
- Drop column no
- concate column year,month,day,hour and change to datetime type
- Handle missing value
"""

df.head()

# drop kolom no
df.drop('No',inplace=True,axis=1)

# function untuk drop semua kolom data station
def drop_no(data) :
  data.drop('No',inplace=True,axis=1)

# proses iterasi untuk menghapus satu satu persatu data stasiun
datas = [df_aoti,df_chang,df_ding,df_shun,df_tian,df_nong,df_dong,df_wanli,df_guch,df_hua,df_guan,df_wanshou]

for data in range(len(datas)) :
  drop_no(datas[data])

"""Menghapus seluruh data station kolom No karena tidak dibutuhkan"""

# concatenate kolom year,month,day,dan hour
df['date'] = pd.to_datetime(df[['year','month','day']]) + pd.to_timedelta(df['hour'],unit='h')
#drop kolom yang tidak dibutuhkan
df.drop(['year','month','day','hour'],axis=1,inplace=True)

#function untuk concatenate seluruh data stasiun
def date_time(data) :
  data['date'] = pd.to_datetime(data[['year','month','day']]) + pd.to_timedelta(data['hour'],unit='h')
  data.drop(['year','month','day','hour'],axis=1,inplace=True)

# proses iterasi untuk concatenate seluruh data datetime
for data in range(len(datas)) :
  date_time(datas[data])

"""Seluruh data stasiun sudah digabungkan month,day,hour,year kolom menjadi 1 column datetime dan mengubah tipe data dari string menjadi datetime type

####Handle missing value dengan nilai rata rata dan mode di tiap station
"""

def fill_null(data) :
  numeric_cols =  ['PM2.5', 'PM10', 'SO2', 'NO2', 'CO', 'O3', 'TEMP', 'PRES', 'DEWP', 'RAIN', 'WSPM']
  data[numeric_cols] = data[numeric_cols].fillna(data[numeric_cols].mean())

  data['wd'].fillna(data['wd'].mode()[0],inplace=True)

"""Tiap stasiun memiliki data yang kosong pada kolom yang sama sehingga digunakan fungsi untuk mengisi data tersebut dengan nilai mean disetiap stasiun

##### Aotizhongxin Station
"""

fill_null(df_aoti)

"""##### Changping Station"""

fill_null(df_chang)

"""##### Dingling Station"""

fill_null(df_ding)

"""##### Shunyi Station"""

fill_null(df_shun)

"""##### Tiantan Station"""

fill_null(df_tian)

"""##### Nongzhanguan Station"""

fill_null(df_nong)

"""##### Dongsi Station"""

fill_null(df_dong)

"""##### Wanshouxigong Station"""

fill_null(df_wanshou)

"""##### Gucheng Station"""

fill_null(df_guch)

"""##### Huairou Station"""

fill_null(df_hua)

"""##### Guanyuan Station

"""

fill_null(df_guan)

"""##### Wanliu Station"""

fill_null(df_wanli)

"""Missing value diisi karena data hari tiap data yang missing berbeda maka perlu diisi untuk mendapatkan informasi pada tanggal tertentu.Pada missing value variabel yang bertipe number diisi dengan dengan nilai mean tiap variabel dan untuk data category diisi dengan nilai yang sering muncul pada variabel tersebut

##### Concate Tiap data stasiun
"""

df = pd.concat(datas , axis=0 , ignore_index = True)

"""concate data tiap stasiun yang sudah melalui tahap cleaning data"""

df['date'] = pd.to_datetime(df['date'])
df['year'] = df['date'].dt.year
df['month'] = df['date'].dt.month

"""## Exploratory Data Analysis (EDA) & Data Visualization

### Explore ...
"""

quality_air_station = df.groupby(['station','year'])['PM2.5','PM10','SO2','NO2','CO','O3'].mean().reset_index()

"""Persebaran rata rata indikator di tiap tahun di stasiun yang berbeda"""

df_max_mean = quality_air_station.max()
df_max_mean['station']

"""Kualitas udara terburuk selama 2013-2017 terjadi di Wanshouxigong pada tahun 2017 yang dimana memiliki nilai rata rata tertinggi tiap indikatornya"""

df_min_mean = quality_air_station.min()
df_min_mean

"""Kualitas udara terbaik selama 2013-2017 terjadi di Aotizhongxin pada tahun 2013 yang dimana memiliki nilai rata rata terendah tiap indikatornya"""

per_year_quality = df.groupby('year')['PM2.5','PM10','SO2','NO2','CO','O3'].mean().reset_index()

"""rata rata indikator PM2.5,PM10,SO2,NO2,CO,O3 tiap tahunnya"""

per_month_year_quality = df.groupby(['year','month'])['PM2.5','PM10','SO2','NO2','CO','O3'].mean()

"""Rata rata dari tiap indikator tiap bulannya dari tahun 2013-2014"""

df_max_quality = df.groupby(['PM2.5','PM10','SO2','NO2','CO','O3'])['station','date'].max().sort_values(by='PM2.5',ascending=False)

df_max_quality.head(5)

"""Terdapat kadar PM2.5 yang tinggi terjadi senilai 999 di Wanshouxigong pada 	2016-02-08 jam 02:00:00"""

df_min_quality = df.groupby(['PM2.5','PM10','SO2','NO2','CO','O3'])['station','date'].min().sort_values(by='PM2.5',ascending=True)

df_min_quality.head()

"""Terdapat kadar PM2.5 yang terendah senilai 2.0 terjadi di stasiun Gucheng pada tanggal 2013-06-09 jam 23:00:00

### Pertanyaan 1: Kapan dan dimana kualitas udara terburuk ?
"""

#mengatur canvas untuk melakukan plot dengan 2 baris dan 3 kolom
fig,ax = plt.subplots(2,3,figsize=(20,6))

#mengatur jarak baris(height) dan kolom(width)
fig.tight_layout(h_pad=10 , w_pad=8)

#bar plot tiap indikator
sns.barplot(x='station',y='PM10',data=quality_air_station.sort_values(by='PM10',ascending=False),ax=ax[0,0])
ax[0,0].tick_params(axis='x',labelrotation=45)
ax[0,0].set_title('Kadar PM10 Setiap Stasiun')

sns.barplot(x='station',y='PM2.5',data=quality_air_station.sort_values(by='PM2.5',ascending=False),ax=ax[0,1])
ax[0,1].tick_params(axis='x',labelrotation=45)
ax[0,1].set_title('Kadar PM2.5 Setiap Stasiun')

sns.barplot(x='station',y='SO2',data=quality_air_station.sort_values(by='SO2',ascending=False),ax=ax[0,2])
ax[0,2].tick_params(axis='x',labelrotation=45)
ax[0,2].set_title('Kadar SO2 Setiap Stasiun')

sns.barplot(x='station',y='NO2',data=quality_air_station.sort_values(by='NO2',ascending=False),ax=ax[1,0])
ax[1,0].tick_params(axis='x',labelrotation=45)
ax[1,0].set_title('Kadar NO2 Setiap Stasiun')

sns.barplot(x='station',y='CO',data=quality_air_station.sort_values(by='CO',ascending=False),ax=ax[1,1])
ax[1,1].tick_params(axis='x',labelrotation=45)
ax[1,1].set_title('Kadar CO Setiap Stasiun')

sns.barplot(x='station',y='O3',data=quality_air_station.sort_values(by='O3',ascending=False),ax=ax[1,2])
ax[1,2].tick_params(axis='x',labelrotation=45)
ax[1,2].set_title('Kadar O3 Setiap Stasiun')

plt.show()

"""### Pertanyaan 2: Bagaimana kualitas udara tiap tahunnya ?"""

# 2 lineplot kadar PM10 dan PM2.5 tiap tahun
plt.figure(figsize=(12,6))
plt.plot(per_year_quality['year'],per_year_quality['PM10'],label='PM10')
plt.plot(per_year_quality['year'],per_year_quality['PM2.5'],label='PM2.5')
plt.title('Kadar PM10 dan PM2.5 Tahun 2013-2017')
plt.xlabel('Year')
plt.legend()
plt.show()

"""## Analisis Hubungan PM2.5 dan PM10"""

import matplotlib.lines as mlines

fig,ax = plt.subplots()
ax.scatter(quality_air_station['PM2.5'],quality_air_station['PM10'])
line = mlines.Line2D([0,1],[0,1],color='red')
transform=ax.transAxes
line.set_transform(transform)
ax.add_line(line)
plt.show()

"""Berdasarkan grafik tersebut hubungan antara PM2.5 dan PM10 adalah linear . Penigkatan PM2.5 diikuti juga dengan kenaikan PM10

## Conclusion

1.   - Gucheng , Wanshouxigong , Wanliu adalah tempat tempat yang memiliki kualitas udara yang buruk
 - Dingling merupakan tempat yang memiliki kualitas udara yang baik .

2. - Kadar udara PM2.5 dan PM10 merupakan kadar udara yang berbahaya . Disetiap tahunnya,diseluruh stasiun terdapat kadar udara yang fluktuatif atau kadar udara tidak konstan dan selalu berubah.Kadar udara paling berbahaya pada tahun 2017 karena kadar PM2.5 dan PM10 yang paling banyak di tahun tersebut . Kadar udara yang terbaik pada tahun 2016 karena kadar PM2.5 dan PM10 memiliki nilai yang terkecil dari tiap tahunnya.
 - Tingkatan kenaikan kadar PM2.5 dan PM10 yang sangat tinggi telah terjadi di tahun 2016-2017 yang menjadikan penurunan kualitas udara selama setahun
 - Penurunan kadar udara kadar PM2.5 dan PM10 yang sangat rendah telah terjadi di tahun 2014-2016 yang menjadi kenaikan kualitas udara yang baik terjadi selama 2 tahun

3. - PM2.5 dan PM10 memiliki hubungan berbanding lurus dengan persebaran yang mengikuti garis merah
"""

df.to_csv('air_quality_fixed.csv',index=False)